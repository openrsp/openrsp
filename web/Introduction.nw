\section{Introduction}
\label{section-introduction}

\subsection{Theoretical Background\index{Theoretical background}}
\label{subsection-theory}

For the time being, \LibName has implemented the density matrix-based
quasienergy formulation of the Kohn--Sham density functional response theory
using perturbation- and time-dependent basis
sets~\cite{Thorvaldsen-JCP-129-214108,Bast-PCCP-13-2627}.

The density matrix-based quasienergy formulation actually works for different
levels of theory, i.e., one-, two- and four-component levels. A relativistic
implementation can be found in Ref.~\cite{Bast-CP-356-177}.

\LibName uses the recursive programming techniques~\cite{Ringholm-JCC-35-622}
to compute different molecular properties order by order. The recursive
programming techniques can also be used for calculations of residues, the
implementation of the first order residues can be found in
Ref.~\cite{Friese-JCTC-11-1129}.

\subsection{\LibName License\index{\LibName License}}

We will release \LibName under the GNU Lesser General Public License:

<<OpenRSPLicense>>=
OpenRSP: open-ended library for response theory
Copyright 2015 Radovan Bast,
               Daniel H. Friese,
               Bin Gao,
               Dan J. Jonsson,
               Magnus Ringholm,
               Kenneth Ruud,
               Andreas Thorvaldsen

OpenRSP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as
published by the Free Software Foundation, either version 3 of
the License, or (at your option) any later version.

OpenRSP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with OpenRSP. If not, see <http://www.gnu.org/licenses/>.
@

\subsection{Open-Ended Response Theory\index{Open-ended response theory}}
\label{subsection-open-ended}

The name \LibName stands for \textbf{open-ended response theory}, that is,
the library is:
\begin{enumerate}
  \item open-ended for different levels of theory, i.e., one-, two- and
    four-component levels;
  \item open-ended for different wave functions, e.g., atomic-orbital~(AO)
    based density matrix, molecular orbital~(MO) cofficients and
    coupled cluster~(CC);
  \item open-ended for different kinds of perturbations; and
  \item open-ended for different host programs.
\end{enumerate}

As aformentioned, \LibName has for the time being implemented the AO based
density matrix response theory (source codes in
\texttt{src/ao\_dens})\footnote{The codes in \texttt{src/ao\_dens} are written
in Fortran, but \LibName APIs are implemented using C language. Therefore,
adapter codes between them are implemented in \texttt{src/ao\_dens/adapter},
for \LibName APIs calling the codes of AO based density matrix response theory,
also for the AO based density matrix response theory codes calling the callback
functions (as function pointers saved by \LibName APIs).}, and it works for
one-, two- and four-component levels by simply setting the appropriate
Hamiltonian. We are now planning to implement the MO and CC based response
theories.

To make \LibName work for any perturbation, we will implement the so called
\textbf{perturbation free scheme}, see Section~\ref{section-openrsp-perturbations}.

In order to make it easy for implementing \LibName into different host programs
(written in different programming languages), we agree to use the
\textbf{callback function scheme}\index{Callback function scheme} in \LibName
in the 2015 Skibotn meeting. The callback functions are specified by host
programs by calling the \LibName application program interface (APIs, both C
and Fortran implemented) during run time, and will be used by \LibName during
calculations, to get contributions from electronic and nuclear Hamiltonian, and
to get response parameters from solving the linear response equation.

Another important issue affects the implementation of \LibName into different
host programs is the matrix and its different operations that \LibName
extensively depends on. Different host programs can have different types of
matrices (dense and sparse, sequential and parallel) and written by different
programming languages (e.g. C and Fortran).

To best utilize the host program's developed matrix routines (if there is), and
also to remove this complexity of matrix problem from \LibName, we also agree
to build \LibName on top of the
\href{https://gitlab.com/bingao/qcmatrix}{\textbf{\textsc{QcMatrix} library}}\index{\textsc{QcMatrix} library}
in the 2015 Skibotn meeting. This matrix library works as an adapter between
\LibName and different matrix routines (implemented in different host programs)
that can be written in C and Fortran\footnote{If there is no matrix routines
implemented in a host program, it can fully use the QcMatrix library that will
invoke BLAS and LAPACK libraries for matrix operations.}.

\subsection{\LibName Framework and APIs\index{\LibName framework and APIs}}

Therefore, a full picture of \LibName used in a C host program can be (the
description of \LibName Fortran APIs can be found in
Section~\ref{section-openrsp-fortran}\index{\LibName Fortran APIs}):

\begin{figure}[hbtp]
  \centering
  \includegraphics[width=\textwidth]{OpenRSP_framework.pdf}
  \caption{\LibName used in a C host program.}
  \label{fig-openrsp-framework}
\end{figure}

As shown in Figure~\ref{fig-openrsp-framework}, the \LibName library is divided
into three parts:
\begin{enumerate}
  \item The ``\LibName C APIs'' work mostly between the host program driver
    routine and other parts of the \LibName library, that all the information
    saved in the ``\LibName C support'' will be set up by calling the
    corresponding \LibName C API;
  \item The ``\LibName response'' is the core part in which the performance
    of response theory will be done;
  \item The ``\LibName C support'' saves the information of perturbations,
    electronic and nuclear Hamiltonian and linear response equation solver,
    and will be used by the ``\LibName response'' part during calculating
    response functions and residues.
\end{enumerate}

The ``\LibName response'' was already implemented using Fortran for the AO
based density matrix response theory (source codes in \texttt{src/ao\_dens})
that will not be covered here.

In the following sections, we will describe how to implement each component of
the ``\LibName C support'' (red blocks in Figure~\ref{fig-openrsp-framework}
under the ``\LibName C support'') and the corresponding ``\LibName C API''.
Each component will have its header file, implemented C \texttt{struct} and
corresponding functions that can be called inside \LibName.

We also need to implement a header file that contains all \LibName APIs and
will be used by \LibName users. This header file, as follows, will encapsulate
all the implemented C \texttt{struct}'s of the ``\LibName C support'' components
into another C \texttt{struct} for the context of \LibName, that should be
the main parameter of all the \LibName APIs.

The \LibName API header file\index{\LibName API header file} is given as
follows. The directives \texttt{\#if !defined(OPENRSP\_H)} and
\texttt{\#define OPENRSP\_H} (\textbf{include guard}\index{Include guard})
together prevent the header file from being compiled more than once.

<<include/openrsp.h>>=
/*
  <<OpenRSPLicense>>

  This is the header file of OpenRSP APIs.

  2014-01-27, Bin Gao:
  * first version
*/

#if !defined(OPENRSP_H)
#define OPENRSP_H

/* host program perturbations */
#include "RSPPerturbation.h"
/* type of electronic wave function */
/*#include "RSPWaveFunction.h"*/
/* overlap integrals */
#include "RSPOverlap.h"
/* one-electron operators */
#include "RSPOneOper.h"
/* two-electron operators */
#include "RSPTwoOper.h"
/* exchange-correlation (XC) functionals */
#include "RSPXCFun.h"
/* nuclear Hamiltonian */
#include "RSPNucHamilton.h"
/* linear response equation solver */
#include "RSPSolver.h"

/* OpenRSP context */
typedef struct {
    QBool assembled;               /* indicates if the OpenRSP context assembled */
    RSPPert *rsp_pert;             /* host program perturbations */
    /*ElecWav *elec_wav;*/           /* implementation-specific data of (electronic) wave function */
    /*ElecWavType elec_wav_type;*/
    RSPOverlap *overlap;           /* overlap integrals */
    RSPOneOper *one_oper;          /* one-electron operators */
    RSPTwoOper *two_oper;          /* two-electron operators */
    RSPXCFun *xc_fun;              /* XC functionals */
    RSPNucHamilton *nuc_hamilton;  /* nuclear Hamiltonian */
    RSPSolver *rsp_solver;         /* linear response equation solver */
} OpenRSP;

/* OpenRSP APIs */
extern QErrorCode OpenRSPCreate(OpenRSP*);
extern QErrorCode OpenRSPSetPerturbations(OpenRSP*,
                                          const QInt,
                                          const QInt*,
                                          const QInt*,
                                          const QInt*,
#if defined(OPENRSP_C_USER_CONTEXT)
                                          QVoid*,
#endif
                                          const GetPertCat);
/*extern QErrorCode OpenRSPSetWaveFunction(OpenRSP*,const ElecWavType);*/
extern QErrorCode OpenRSPSetOverlap(OpenRSP*,
                                    const QInt,
                                    const QInt*,
                                    const QInt*,
#if defined(OPENRSP_C_USER_CONTEXT)
                                    QVoid*,
#endif
                                    const GetOverlapMat,
                                    const GetOverlapExp);
extern QErrorCode OpenRSPAddOneOper(OpenRSP*,
                                    const QInt,
                                    const QInt*,
                                    const QInt*,
#if defined(OPENRSP_C_USER_CONTEXT)
                                    QVoid*,
#endif
                                    const GetOneOperMat,
                                    const GetOneOperExp);
extern QErrorCode OpenRSPAddTwoOper(OpenRSP*,
                                    const QInt,
                                    const QInt*,
                                    const QInt*,
#if defined(OPENRSP_C_USER_CONTEXT)
                                    QVoid*,
#endif
                                    const GetTwoOperMat,
                                    const GetTwoOperExp);
extern QErrorCode OpenRSPAddXCFun(OpenRSP*,
                                  const QInt,
                                  const QInt*,
                                  const QInt*,
#if defined(OPENRSP_C_USER_CONTEXT)
                                  QVoid*,
#endif
                                  const GetXCFunMat,
                                  const GetXCFunExp);
extern QErrorCode OpenRSPSetNucHamilton(OpenRSP*,
                                        const QInt,
                                        const QInt*,
                                        const QInt*,
#if defined(OPENRSP_C_USER_CONTEXT)
                                        QVoid*,
#endif 
                                        const GetNucContrib,
/*FIXME: num_atoms to be removed after perturbation free scheme implemented*/
                                        const QInt);
extern QErrorCode OpenRSPSetLinearRSPSolver(OpenRSP*,
#if defined(OPENRSP_C_USER_CONTEXT)
                                            QVoid*,
#endif
                                            const GetLinearRSPSolution);
extern QErrorCode OpenRSPAssemble(OpenRSP*);
extern QErrorCode OpenRSPWrite(const OpenRSP*,const QChar*);
extern QErrorCode OpenRSPGetRSPFun(OpenRSP*,
                                   const QcMat*,
                                   const QcMat*,
                                   const QcMat*,
                                   const QInt,
                                   const QInt*,
                                   const QInt*,
                                   const QInt*,
                                   const QReal*,
                                   const QInt*,
                                   const QInt,
                                   QReal*);
extern QErrorCode OpenRSPGetResidue(OpenRSP*,
                                    const QcMat*,
                                    const QcMat*,
                                    const QcMat*,
                                    const QInt,
                                    const QInt,
                                    const QReal*,
                                    QcMat*[],
                                    const QInt,
                                    const QInt*,
                                    const QInt*,
                                    const QInt*,
                                    const QInt*,
                                    const QInt*,
                                    const QReal*,
                                    const QInt*,
                                    const QInt,
                                    QReal*);
extern QErrorCode OpenRSPDestroy(OpenRSP*);

#endif
@

Here, we have also introduced the type of electronic wave function, but
which has not been implemented. The directive
\begin{Verbatim}
#if defined(OPENRSP_C_USER_CONTEXT)
                                            QVoid*,
#endif
\end{Verbatim}
in most \LibName APIs enables users to provide their necessary setting
for the callback functions that \LibName will send it back when invoking
the callback functions. For instance, users can provide the information
of basis sets to \LibName and use it inside the callback functions for
different integral calculations.

In this section, we will implement the APIs [[OpenRSPCreate]],
[[OpenRSPAssemble]], [[OpenRSPWrite]] and [[OpenRSPDestroy]], while other
APIs will be implemented in the following sections.

<<src/OpenRSPCreate.c>>=
/*
  <<OpenRSPLicense>>

  This file implements the function OpenRSPCreate().

  2014-01-28, Bin Gao:
  * first version
*/

#include "openrsp.h"

QErrorCode OpenRSPCreate(OpenRSP *open_rsp)
{
    open_rsp->assembled = QFALSE;
    open_rsp->rsp_pert = NULL;
    /*open_rsp->elec_wav = NULL;*/
    /*open_rsp->elec_wav_type = ELEC_AO_D_MATRIX;*/
    open_rsp->overlap = NULL;
    open_rsp->one_oper = NULL;
    open_rsp->two_oper = NULL;
    open_rsp->xc_fun = NULL;
    open_rsp->nuc_hamilton = NULL;
    open_rsp->rsp_solver = NULL;
    return QSUCCESS;
}
@

