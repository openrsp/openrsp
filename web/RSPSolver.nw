\section{Linear Response Equation Solver}
\label{section-OpenRSP-solver}

Users can use the following API to set the linear response equation solver:
<<OpenRSP.c>>=
/* <function name='OpenRSPSetLinearRSPSolver' author='Bin Gao' date='2014-08-06'>
     Set the context of linear response equation solver
     <param name='open_rsp' direction='inout'>
       The context of response theory calculations
     </param>
     <param name='user_ctx' direction='in'>
       User-defined callback function context
     </param>
     <param name='get_linear_rsp_solution' direction='in'>
       User-specified callback function of linear response equation solver
     </param>
     <return>Error information</return>
   </function> */
QErrorCode OpenRSPSetLinearRSPSolver(OpenRSP *open_rsp,
#if defined(OPENRSP_C_USER_CONTEXT)
                                     void *user_ctx,
#endif
                                     const GetLinearRSPSolution get_linear_rsp_solution)
{
    QErrorCode ierr;  /* error information */
    /* creates the context of response equation solver */
    if (open_rsp->rsp_solver!=NULL) {
        ierr = RSPSolverDestroy(open_rsp->rsp_solver);
        QErrorCheckCode(ierr, FILE_AND_LINE, "calling RSPSolverDestroy()");
    }
    else {
        open_rsp->rsp_solver = (RSPSolver *)malloc(sizeof(RSPSolver));
        if (open_rsp->rsp_solver==NULL) {
            QErrorExit(FILE_AND_LINE, "allocates memory for solver");
        }
    }
    ierr = RSPSolverCreate(open_rsp->rsp_solver,
#if defined(OPENRSP_C_USER_CONTEXT)
                           user_ctx,
#endif
                           get_linear_rsp_solution);
    QErrorCheckCode(ierr, FILE_AND_LINE, "calling RSPSolverCreate()");
    return QSUCCESS;
}

@ The following header file defines all quantities we need for the linear
response equation solver. Type [[GetLinearRSPSolution]] defines the
requirements of the callback function of the linear response equation solver.
<<RSPSolver.h>>=
/*
  <<OpenRSPLicense>>

  <header name='RSPSolver.h' author='Bin Gao' date='2014-08-06'>
    The header file of linear response equation solver used inside OpenRSP
  </header>
*/

#if !defined(RSP_SOLVER_H)
#define RSP_SOLVER_H

#include "qcmatrix.h"

typedef void (*GetLinearRSPSolution)(const QInt,
                                     const QInt*,
                                     const QInt*,
                                     const QReal*,
                                     QcMat*[],
#if defined(OPENRSP_C_USER_CONTEXT)
                                     void*,
#endif
                                     QcMat*[]);

<<RSPSolverStruct>>

<<RSPSolverAPIs>>

#endif
@ The context of linear response equation solver is:
<<RSPSolverStruct>>=
typedef struct {
#if defined(OPENRSP_C_USER_CONTEXT)
    void *user_ctx;                                /* user-defined callback-function
                                                      context */
#endif
    GetLinearRSPSolution get_linear_rsp_solution;  /* user-specified function of
                                                      linear response equation solver */
} RSPSolver;
@ and the related functions are:
<<RSPSolverAPIs>>=
extern QErrorCode RSPSolverCreate(RSPSolver*,
#if defined(OPENRSP_C_USER_CONTEXT)
                                  void*,
#endif
                                  const GetLinearRSPSolution);
extern QErrorCode RSPSolverAssemble(RSPSolver*);
extern QErrorCode RSPSolverWrite(const RSPSolver*,FILE*);
extern QErrorCode RSPSolverGetLinearRSPSolution(const RSPSolver*,
                                                const QInt,
                                                const QInt*,
                                                const QInt*,
                                                const QReal*,
                                                QcMat*[],
                                                QcMat*[]);
extern QErrorCode RSPSolverDestroy(RSPSolver*);
@

These functions are implemented as follows:
<<RSPSolver.c>>=
/*
  <<OpenRSPLicense>>
*/

#include "RSPSolver.h"

/* <function name='RSPSolverCreate'
             attr='private'
             author='Bin Gao'
             date='2014-08-06'>
     Create the context of response equation solver, should be called at first
     <param name='rsp_solver' direction='inout'>
       The context of response equation solver
     </param>
     <param name='user_ctx' direction='in'>
       User-defined callback function context
     </param>
     <param name='get_linear_rsp_solution' direction='in'>
       User-specified callback function of linear response equation solver
     </param>
     <return>Error information</return>
   </function> */
QErrorCode RSPSolverCreate(RSPSolver *rsp_solver,
#if defined(OPENRSP_C_USER_CONTEXT)
                           void *user_ctx,
#endif
                           const GetLinearRSPSolution get_linear_rsp_solution)
{
#if defined(OPENRSP_C_USER_CONTEXT)
    rsp_solver->user_ctx = user_ctx;
#endif
    rsp_solver->get_linear_rsp_solution = get_linear_rsp_solution;
    return QSUCCESS;
}

/* <function name='RSPSolverAssemble'
             attr='private'
             author='Bin Gao'
             date='2014-08-06'>
     Assembles the context of response equation solver
     <param name='rsp_solver' direction='inout'>
       The context of response equation solver
     </param>
     <return>Error information</return>
   </function> */
QErrorCode RSPSolverAssemble(RSPSolver *rsp_solver)
{
/*FIXME: to implement? */
    return QSUCCESS;
}

/* <function name='RSPSolverWrite'
             attr='private'
             author='Bin Gao'
             date='2014-08-06'>
     Writes the context of response equation solver
     <param name='rsp_solver' direction='in'>
       The context of response equation solver
     </param>
     <param name='fp_solver' direction='inout'>File pointer</param>
     <return>Error information</return>
   </function> */
QErrorCode RSPSolverWrite(const RSPSolver *rsp_solver, FILE *fp_solver)
{
#if defined(OPENRSP_C_USER_CONTEXT)
    if (rsp_solver->user_ctx!=NULL) {
        fprintf(fp_solver, "RSPSolverWrite>> user-defined function context given\n");
    }
#endif
    return QSUCCESS;
}

/* <function name='RSPSolverGetLinearRSPSolution'
             attr='private'
             author='Bin Gao'
             date='2014-08-06'>
     Solve the linear response equation
     <param name='rsp_solver' direction='in'>
       The context of response equation solver
     </param>
     <param name='num_pert' direction='in'>
       Number of different perturbations on the right hand side of the linear
       response equation
     </param>
     <param name='num_comps' direction='in'>
       Number of components of each perturbation, size is <num_pert>
     </param>
     <param name='num_freq_sums' direction='in'>
       For each perturbation, number of complex frequency sums on the left hand
       side of the linear response equation, size is <num_pert>
     </param>
     <param name='freq_sums' direction='in'>
       The complex frequency sums on the left hand side of the linear response
       equation, size is twice of the sum of <num_freq_sums>
     </param>
     <param name='RHS_mat' direction='in'>
       Right-hand-side (RHS) matrices, size is the dot product of <num_comps>
       and <num_freq_sums>
     <param name='rsp_param' direction='inout'>
       Solved response parameters, size is the dot product of <num_comps> and
       <num_freq_sums>
     </param>
     <return>Error information</return>
   </function> */
QErrorCode RSPSolverGetLinearRSPSolution(const RSPSolver *rsp_solver,
                                         const QInt num_pert,
                                         const QInt *num_comps,
                                         const QInt *num_freq_sums,
                                         const QReal *freq_sums,
                                         QcMat *RHS_mat[],
                                         QcMat *rsp_param[])
{
    rsp_solver->get_linear_rsp_solution(num_pert,
                                        num_comps,
                                        num_freq_sums,
                                        freq_sums,
                                        RHS_mat,
#if defined(OPENRSP_C_USER_CONTEXT)
                                        rsp_solver->user_ctx,
#endif
                                        rsp_param);
    return QSUCCESS;
}

/* <function name='RSPSolverDestroy'
             attr='private'
             author='Bin Gao'
             date='2014-08-05'>
     Destroys the context of response equation solver, should be called at the end
     <param name='rsp_solver' direction='inout'>
       The context of response equation solver
     </param>
     <return>Error information</return>
   </function> */
QErrorCode RSPSolverDestroy(RSPSolver *rsp_solver)
{
#if defined(OPENRSP_C_USER_CONTEXT)
    rsp_solver->user_ctx = NULL;
#endif
    rsp_solver->get_linear_rsp_solution = NULL;
    return QSUCCESS;
}

