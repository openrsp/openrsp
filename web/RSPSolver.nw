\section{Linear Response Equation Solver}
\label{section-OpenRSP-solver}

Users can use the following API to set the linear response equation solver:
<<OpenRSPSetLinearRSPSolver.c>>=
/*
  <<OpenRSPLicense>>
*/

#include "OpenRSP.h"

/*@% \brief sets the context of linear response equation solver
     \author Bin Gao
     \date 2014-08-06
     \param[OpenRSP:struct]{inout} open_rsp the context of response theory calculations
     \param[QVoid:void]{in} user_ctx user-defined callback function context
     \param[GetLinearRSPSolution:void]{in} get_linear_rsp_solution user specified
         function of linear response equation solver
     \return[QErrorCode:int] error information
*/
QErrorCode OpenRSPSetLinearRSPSolver(OpenRSP *open_rsp,
#if defined(OPENRSP_C_USER_CONTEXT)
                                     QVoid *user_ctx,
#endif
                                     const GetLinearRSPSolution get_linear_rsp_solution)
{
    QErrorCode ierr;  /* error information */
    /* creates the context of response equation solver */
    if (open_rsp->rsp_solver!=NULL) {
        ierr = RSPSolverDestroy(open_rsp->rsp_solver);
        QErrorCheckCode(ierr, FILE_AND_LINE, "calling RSPSolverDestroy()");
    }
    else {
        open_rsp->rsp_solver = (RSPSolver *)malloc(sizeof(RSPSolver));
        if (open_rsp->rsp_solver==NULL) {
            QErrorExit(FILE_AND_LINE, "allocates memory for rsp_solver");
        }
    }
    ierr = RSPSolverCreate(open_rsp->rsp_solver,
#if defined(OPENRSP_C_USER_CONTEXT)
                           user_ctx,
#endif
                           get_linear_rsp_solution);
    QErrorCheckCode(ierr, FILE_AND_LINE, "calling RSPSolverCreate()");
    return QSUCCESS;
}
@

The header file of the linear response equation solver is:
<<RSPSolver.h>>=
/*
  <<OpenRSPLicense>>

  <header name='RSPSolver.h' author='Bin Gao' date='2014-08-06'>
    The header file of linear response equation solver used inside OpenRSP
  </header>
*/

#if !defined(RSP_SOLVER_H)
#define RSP_SOLVER_H

/* QcMatrix library */
#include "qcmatrix.h"

/* callback function of linear response equation solver */
typedef QVoid (*GetLinearRSPSolution)(const QInt,
                                      const QReal*,
                                      const QInt,
                                      QcMat*[],
#if defined(OPENRSP_C_USER_CONTEXT)
                                      QVoid*,
#endif
                                      QcMat*[]);

/* context of linear response equation solver */
typedef struct {
#if defined(OPENRSP_C_USER_CONTEXT)
    QVoid *user_ctx;                              /* user-defined callback function context */
#endif
    GetLinearRSPSolution get_linear_rsp_solution; /* user specified function of linear response equation solver */
} RSPSolver;

/* functions related to the linear response equation solver */
extern QErrorCode RSPSolverCreate(RSPSolver*,
#if defined(OPENRSP_C_USER_CONTEXT)
                                  QVoid*,
#endif
                                  const GetLinearRSPSolution);
extern QErrorCode RSPSolverAssemble(RSPSolver*);
extern QErrorCode RSPSolverWrite(const RSPSolver*,FILE*);
extern QErrorCode RSPSolverGetLinearRSPSolution(const RSPSolver*,
                                                const QInt,
                                                const QReal*,
                                                const QInt,
                                                QcMat*[],
                                                QcMat*[]);
extern QErrorCode RSPSolverDestroy(RSPSolver*);

#endif
@

The functions are implemented as follows:
<<RSPSolverCreate.c>>=
/*
  <<OpenRSPLicense>>
*/

#include "RSPSolver.h"

/*% \brief creates the context of response equation solver, should be called at first
    \author Bin Gao
    \date 2014-08-06
    \param[RSPSolver:struct]{inout} rsp_solver the context of response equation solver
    \param[QVoid:void]{in} user_ctx user-defined callback function context
    \param[GetLinearRSPSolution:void]{in} get_linear_rsp_solution user specified function of
        linear response equation solver
    \return[QErrorCode:int] error information
*/
QErrorCode RSPSolverCreate(RSPSolver *rsp_solver,
#if defined(OPENRSP_C_USER_CONTEXT)
                           QVoid *user_ctx,
#endif
                           const GetLinearRSPSolution get_linear_rsp_solution)
{
#if defined(OPENRSP_C_USER_CONTEXT)
    rsp_solver->user_ctx = user_ctx;
#endif
    rsp_solver->get_linear_rsp_solution = get_linear_rsp_solution;
    return QSUCCESS;
}

<<RSPSolverAssemble.c>>=
/*
  <<OpenRSPLicense>>
*/

#include "RSPSolver.h"

/*% \brief assembles the context of response equation solver
    \author Bin Gao
    \date 2014-08-06
    \param[RSPSolver:struct]{inout} rsp_solver the context of response equation solver
    \return[QErrorCode:int] error information
*/
QErrorCode RSPSolverAssemble(RSPSolver *rsp_solver)
{
/*FIXME: to implement */
    return QSUCCESS;
}

<<RSPSolverWrite.c>>=
/*
  <<OpenRSPLicense>>
*/

#include "RSPSolver.h"

/*% \brief writes the context of response equation solver
    \author Bin Gao
    \date 2014-08-06
    \param[RSPSolver:struct]{in} rsp_solver the context of response equation solver
    \param[FILE]{inout} fp_solver file pointer
    \return[QErrorCode:int] error information
*/
QErrorCode RSPSolverWrite(const RSPSolver *rsp_solver, FILE *fp_solver)
{
#if defined(OPENRSP_C_USER_CONTEXT)
    if (rsp_solver->user_ctx!=NULL) {
        fprintf(fp_solver, "RSPSolverWrite>> user-defined function context given\n");
    }
#endif
    return QSUCCESS;
}

<<RSPSolverGetLinearRSPSolution.c>>=
/*
  <<OpenRSPLicense>>
*/

#include "RSPSolver.h"

/*% \brief solves the linear response equation
    \author Bin Gao
    \date 2014-08-06
    \param[RSPSolver:struct]{in} rsp_solver the context of response equation solver
    \param[QInt:int]{in} num_freq_sums number of complex frequency sums
        on the left hand side of the linear response equation
    \param[QReal:real]{in} freq_sums the complex frequency sums on the left hand side
    \param[QInt:int]{in} size_pert size of perturbations acting on the
        time-dependent self-consistent-field (TDSCF) equation
    \param[QcMat:struct]{in} RHS_mat RHS matrices, size is \var{size_pert}*\var{num_freq_sums}
    \param[QcMat:struct]{out} rsp_param solved response parameters,
        size is \var{size_pert}*\var{num_freq_sums}
    \return[QErrorCode:int] error information
*/
QErrorCode RSPSolverGetLinearRSPSolution(const RSPSolver *rsp_solver,
                                         const QInt num_freq_sums,
                                         const QReal *freq_sums,
                                         const QInt size_pert,
                                         QcMat *RHS_mat[],
                                         QcMat *rsp_param[])
{
    rsp_solver->get_linear_rsp_solution(num_freq_sums,
                                        freq_sums,
                                        size_pert,
                                        RHS_mat,
#if defined(OPENRSP_C_USER_CONTEXT)
                                        rsp_solver->user_ctx,
#endif
                                        rsp_param);
    return QSUCCESS;
}

<<RSPSolverDestroy.c>>=
/*
  <<OpenRSPLicense>>
*/

#include "RSPSolver.h"

/*% \brief destroys the context of response equation solver, should be called at the end
    \author Bin Gao
    \date 2014-08-06
    \param[RSPSolver:struct]{inout} rsp_solver the context of response equation solver
    \return[QErrorCode:int] error information
*/
QErrorCode RSPSolverDestroy(RSPSolver *rsp_solver)
{
#if defined(OPENRSP_C_USER_CONTEXT)
    rsp_solver->user_ctx = NULL;
#endif
    rsp_solver->get_linear_rsp_solution = NULL;
    return QSUCCESS;
}

