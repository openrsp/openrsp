\section{One-Electron Operators}
\label{section-OpenRSP-OneOper}

Users can use the following API to add different one-electron operators:
<<OpenRSP.c>>=
/* <function name='OpenRSPAddOneOper' author='Bin Gao' date='2014-07-30'>
     Add a one-electron operator to the Hamiltonian
     <param name='open_rsp' direction='inout'>
       The context of response theory calculations
     </param>
     <param name='num_pert_lab' direction='in'>
       Number of all different perturbation labels that can act on the
       one-electron operator
     </param>
     <param name='pert_labels' direction='in'>
       All the different perturbation labels involved
     </param>
     <param name='pert_max_orders' direction='in'>
       Allowed maximal order of a perturbation described by exactly one of
       the above different labels
     </param>
     <param name='user_ctx' direction='in'>
       User-defined callback function context
     </param>
     <param name='get_one_oper_mat' direction='in'>
       User-specified callback function to calculate integral matrices of
       one-electron operator as well as its derivatives with respect to
       different perturbations
     </param>
     <param name='get_one_oper_exp' direction='in'>
       User-specified callback function to calculate expectation values of
       one-electron operator as well as its derivatives with respect to
       different perturbations
     </param>
     <return>Error information</return>
   </function> */
QErrorCode OpenRSPAddOneOper(OpenRSP *open_rsp,
                             const QInt num_pert_lab,
                             const QcPertInt *pert_labels,
                             const QInt *pert_max_orders,
#if defined(OPENRSP_C_USER_CONTEXT)
                             void *user_ctx,
#endif
                             const GetOneOperMat get_one_oper_mat,
                             const GetOneOperExp get_one_oper_exp)
{
    QErrorCode ierr;  /* error information */
    /* creates the linked list of one-electron operators */
    if (open_rsp->one_oper==NULL) {
        ierr = RSPOneOperCreate(&open_rsp->one_oper,
                                num_pert_lab,
                                pert_labels,
                                pert_max_orders,
#if defined(OPENRSP_C_USER_CONTEXT)
                                user_ctx,
#endif
                                get_one_oper_mat,
                                get_one_oper_exp);
        QErrorCheckCode(ierr, FILE_AND_LINE, "calling RSPOneOperCreate()");
    }
    /* adds the one-electron operator to the linked list */
    else {
        ierr = RSPOneOperAdd(open_rsp->one_oper,
                             num_pert_lab,
                             pert_labels,
                             pert_max_orders,
#if defined(OPENRSP_C_USER_CONTEXT)
                             user_ctx,
#endif
                             get_one_oper_mat,
                             get_one_oper_exp);
        QErrorCheckCode(ierr, FILE_AND_LINE, "calling RSPOneOperAdd()");
    }
    return QSUCCESS;
}

@ The following header file defines all quantities we need for one-electron
operators. Types [[GetOneOperMat]] and [[GetOneOperpExp]] define the
requirements of two callback functions from the host program to calculate
respectively the integral matrices and expectation values of a one-electron
operator and its derivatives.
<<RSPOneOper.h>>=
/*
  <<OpenRSPLicense>>

  <header name='RSPOneOper.h' author='Bin Gao' date='2014-07-30'>
    The header file of one-electron operators used inside OpenRSP
  </header>
*/

#if !defined(RSP_ONEOPER_H)
#define RSP_ONEOPER_H

#include "qcmatrix.h"
#include "RSPPerturbation.h"

typedef void (*GetOneOperMat)(const QInt,
                              const QcPertInt*,
                              const QInt*,
#if defined(OPENRSP_C_USER_CONTEXT)
                              void*,
#endif
                              const QInt,
                              QcMat*[]);
typedef void (*GetOneOperExp)(const QInt,
                              const QcPertInt*,
                              const QInt*,
                              const QInt,
                              QcMat*[],
#if defined(OPENRSP_C_USER_CONTEXT)
                              void*,
#endif
                              const QInt,
                              QReal*);

<<RSPOneOperStruct>>

<<RSPOneOperAPIs>>

#endif
@ Here we use a linked list for the context of one-electron operators:
<<RSPOneOperStruct>>=
typedef struct RSPOneOper RSPOneOper;
struct RSPOneOper {
    QInt num_pert_lab;               /* number of different perturbation labels
                                        that can act as perturbations on the
                                        one-electron operator */
    QInt oper_num_pert;              /* number of perturbations on the
                                        one-electron operator, only used for
                                        callback functions */
    QInt *pert_max_orders;           /* allowed maximal order of a perturbation
                                        described by exactly one of these
                                        different labels */
    QInt *oper_pert_orders;          /* orders of perturbations on the
                                        one-electron operator, only used for
                                        callback functions */
    QcPertInt *pert_labels;          /* all the different perturbation labels */
    QcPertInt *oper_pert_labels;     /* labels of perturbations on the
                                        one-electron operator, only used for
                                        callback functions */
#if defined(OPENRSP_C_USER_CONTEXT)
    void *user_ctx;                  /* user-defined callback-function context */
#endif
    GetOneOperMat get_one_oper_mat;  /* user-specified function for calculating
                                        integral matrices */
    GetOneOperExp get_one_oper_exp;  /* user-specified function for calculating
                                        expectation values */
    RSPOneOper *next_oper;           /* pointer to the next one-electron operator */
};
@ and the functions related to the one-electron operators:
<<RSPOneOperAPIs>>=
extern QErrorCode RSPOneOperCreate(RSPOneOper**,
                                   const QInt,
                                   const QcPertInt*,
                                   const QInt*,
#if defined(OPENRSP_C_USER_CONTEXT)
                                   void*,
#endif
                                   const GetOneOperMat,
                                   const GetOneOperExp);
extern QErrorCode RSPOneOperAdd(RSPOneOper*,
                                const QInt,
                                const QcPertInt*,
                                const QInt*,
#if defined(OPENRSP_C_USER_CONTEXT)
                                void*,
#endif
                                const GetOneOperMat,
                                const GetOneOperExp);
extern QErrorCode RSPOneOperAssemble(RSPOneOper*,const RSPPert*);
extern QErrorCode RSPOneOperWrite(RSPOneOper*,FILE*);
extern QErrorCode RSPOneOperGetMat(RSPOneOper*,
                                   const QInt,
                                   const QcPertInt*,
                                   const QInt,
                                   QcMat*[]);
extern QErrorCode RSPOneOperGetExp(RSPOneOper*,
                                   const QInt,
                                   const QcPertInt*,
                                   const QInt,
                                   QcMat*[],
                                   const QInt,
                                   QReal*);
extern QErrorCode RSPOneOperDestroy(RSPOneOper**);
@

The functions are implemented as follows:
<<RSPOneOper.c>>=
/*
  <<OpenRSPLicense>>
*/

#include "RSPOneOper.h"

/* <function name='RSPOneOperCreate'
             attr='private'
             author='Bin Gao'
             date='2014-07-30'>
     Create a node of a linked list for a given one-electron operator, should
     be called at first
     <param name='one_oper' direction='inout'>
       The linked list of one-electron operators
     </param>
     <param name='num_pert_lab' direction='in'>
       Number of all different perturbation labels that can act as
       perturbations on the one-electron operator
     </param>
     <param name='pert_labels' direction='in'>
       All the different perturbation labels
     </param>
     <param name='pert_max_orders' direction='in'>
       Allowed maximal order of a perturbation described by exactly one of
       the above different labels
     </param>
     <param name='user_ctx' direction='in'>
       User-defined callback-function context
     </param>
     <param name='get_one_oper_mat' direction='in'>
       User-specified function for calculating integral matrices of the
       one-electron operator and its derivatives
     </param>
     <param name='get_one_oper_exp' direction='in'>
       User-specified function for calculating expectation values of the
       one-electron operator and its derivatives
     </param>
     <return>Error information</return>
   </function> */
QErrorCode RSPOneOperCreate(RSPOneOper **one_oper,
                            const QInt num_pert_lab,
                            const QcPertInt *pert_labels,
                            const QInt *pert_max_orders,
#if defined(OPENRSP_C_USER_CONTEXT)
                            void *user_ctx,
#endif
                            const GetOneOperMat get_one_oper_mat,
                            const GetOneOperExp get_one_oper_exp)
{
    RSPOneOper *new_oper;  /* new operator */
    QInt ilab;             /* incremental recorders over perturbation labels */
    QInt jlab;
    new_oper = (RSPOneOper *)malloc(sizeof(RSPOneOper));
    if (new_oper==NULL) {
        QErrorExit(FILE_AND_LINE, "allocates memory for one-electron operator");
    }
    if (num_pert_lab<0) {
        printf("RSPOneOperCreate>> number of perturbation labels %"QINT_FMT"\n",
               num_pert_lab);
        QErrorExit(FILE_AND_LINE, "invalid number of perturbation labels");
    }
    else if (num_pert_lab>OPENRSP_PERT_LABEL_MAX) {
        printf("RSPOneOperCreate>> number of perturbation labels %"QINT_FMT"\n",
               num_pert_lab);
        printf("RSPOneOperCreate>> maximal value for pert. labels %"QCPERTINT_FMT"\n",
               OPENRSP_PERT_LABEL_MAX);
        QErrorExit(FILE_AND_LINE, "too many perturbation labels");
    }
    new_oper->num_pert_lab = num_pert_lab;
    if (new_oper->num_pert_lab>0) {
        new_oper->pert_max_orders = (QInt *)malloc(num_pert_lab*sizeof(QInt));
        if (new_oper->pert_max_orders==NULL) {
            printf("RSPOneOperCreate>> number of perturbation labels %"QINT_FMT"\n",
                   num_pert_lab);
            QErrorExit(FILE_AND_LINE, "allocates memory for allowed maximal orders");
        }
        new_oper->oper_pert_orders = (QInt *)malloc(num_pert_lab*sizeof(QInt));
        if (new_oper->oper_pert_orders==NULL) {
            printf("RSPOneOperCreate>> number of perturbation labels %"QINT_FMT"\n",
                   num_pert_lab);
            QErrorExit(FILE_AND_LINE, "allocates memory for pert. orders on 1el operator");
        }
        new_oper->pert_labels = (QcPertInt *)malloc(num_pert_lab*sizeof(QcPertInt));
        if (new_oper->pert_labels==NULL) {
            printf("RSPOneOperCreate>> number of perturbation labels %"QINT_FMT"\n",
                   num_pert_lab);
            QErrorExit(FILE_AND_LINE, "allocates memory for perturbation labels");
        }
        new_oper->oper_pert_labels = (QcPertInt *)malloc(num_pert_lab*sizeof(QcPertInt));
        if (new_oper->oper_pert_labels==NULL) {
            printf("RSPOneOperCreate>> number of perturbation labels %"QINT_FMT"\n",
                   num_pert_lab);
            QErrorExit(FILE_AND_LINE, "allocates memory for pert. labels on 1el operator");
        }
        for (ilab=0; ilab<num_pert_lab; ilab++) {
            if (pert_labels[ilab]>OPENRSP_PERT_LABEL_MAX) {
                printf("RSPOneOperCreate>> %"QINT_FMT"-th pert. label %"QCPERTINT_FMT"\n",
                       ilab,
                       pert_labels[ilab]);
                printf("RSPOneOperCreate>> maximal value for pert. labels %"QCPERTINT_FMT"\n",
                       OPENRSP_PERT_LABEL_MAX);
                QErrorExit(FILE_AND_LINE, "invalid perturbation label");
            }
            /* each element of <pert_labels> should be unique */
            for (jlab=0; jlab<ilab; jlab++) {
                if (pert_labels[jlab]==pert_labels[ilab]) {
                    printf("RSPOneOperCreate>> %"QINT_FMT"-th pert. label %"QCPERTINT_FMT"\n",
                           jlab,
                           pert_labels[jlab]);
                    printf("RSPOneOperCreate>> %"QINT_FMT"-th pert. label %"QCPERTINT_FMT"\n",
                           ilab,
                           pert_labels[ilab]);
                    QErrorExit(FILE_AND_LINE, "repeated perturbation labels not allowed");
                }
            }
            new_oper->pert_labels[ilab] = pert_labels[ilab];
            if (pert_max_orders[ilab]<1) {
                printf("RSPOneOperCreate>> %"QINT_FMT"-th pert. label %"QCPERTINT_FMT"\n",
                       ilab,
                       pert_labels[ilab]);
                printf("RSPOneOperCreate>> allowed maximal order is %"QINT_FMT"\n",
                       pert_max_orders[ilab]);
                QErrorExit(FILE_AND_LINE, "only positive order allowed");
            }
            new_oper->pert_max_orders[ilab] = pert_max_orders[ilab];
        }
    }
    else {
        new_oper->pert_max_orders = NULL;
        new_oper->oper_pert_orders = NULL;
        new_oper->pert_labels = NULL;
        new_oper->oper_pert_labels = NULL;
    }
#if defined(OPENRSP_C_USER_CONTEXT)
    new_oper->user_ctx = user_ctx;
#endif
    new_oper->get_one_oper_mat = get_one_oper_mat;
    new_oper->get_one_oper_exp = get_one_oper_exp;
    new_oper->next_oper = NULL;
    *one_oper = new_oper;
    return QSUCCESS;
}

@ As shown here, we allow for a one-electron operator that does not depend on
any peraturbation---[[num_pert_lab==0]], i.e. any perturbed integral matrix and
expectation value of this one-electron operator is zero.

<<RSPOneOper.c>>=
/* <function name='RSPOneOperAdd'
             attr='private'
             author='Bin Gao'
             date='2014-07-30'>
     Add a given one-electron operator to the linked list
     <param name='one_oper' direction='inout'>
       The linked list of one-electron operators
     </param>
     <param name='num_pert_lab' direction='in'>
       Number of all different perturbation labels that can act as
       perturbations on the one-electron operator
     </param>
     <param name='pert_labels' direction='in'>
       All the different perturbation labels
     </param>
     <param name='pert_max_orders' direction='in'>
       Allowed maximal order of a perturbation described by exactly one of
       the above different labels
     </param>
     <param name='user_ctx' direction='in'>
       User-defined callback-function context
     </param>
     <param name='get_one_oper_mat' direction='in'>
       User-specified function for calculating integral matrices of the
       one-electron operator and its derivatives
     </param>
     <param name='get_one_oper_exp' direction='in'>
       User-specified function for calculating expectation values of the
       one-electron operator and its derivatives
     </param>
     <return>Error information</return>
   </function> */
QErrorCode RSPOneOperAdd(RSPOneOper *one_oper,
                         const QInt num_pert_lab,
                         const QcPertInt *pert_labels,
                         const QInt *pert_max_orders,
#if defined(OPENRSP_C_USER_CONTEXT)
                         void *user_ctx,
#endif
                         const GetOneOperMat get_one_oper_mat,
                         const GetOneOperExp get_one_oper_exp)
{
    RSPOneOper *new_oper;  /* new operator */
    RSPOneOper *cur_oper;  /* current operator */
    QErrorCode ierr;       /* error information */
    /* creates the new operator */
    ierr = RSPOneOperCreate(&new_oper,
                            num_pert_lab,
                            pert_labels,
                            pert_max_orders,
#if defined(OPENRSP_C_USER_CONTEXT)
                            user_ctx,
#endif
                            get_one_oper_mat,
                            get_one_oper_exp);
    QErrorCheckCode(ierr, FILE_AND_LINE, "calling RSPOneOperCreate()");
    /* walks to the last operator */
    cur_oper = one_oper;
    while (cur_oper->next_oper!=NULL) {
        cur_oper = cur_oper->next_oper;
    }
    /* inserts the new operator to the tail of the linked list */
    cur_oper->next_oper = new_oper;
    return QSUCCESS;
}

/* <function name='RSPOneOperAssemble'
             attr='private'
             author='Bin Gao'
             date='2014-07-30'>
     Assembles the linked list of one-electron operators
     <param name='one_oper' direction='inout'>
       The linked list of one-electron operators
     </param>
     <param name='rsp_pert' direction='in'>
       The context of perturbations
     </param>
     <return>Error information</return>
   </function> */
QErrorCode RSPOneOperAssemble(RSPOneOper *one_oper, const RSPPert *rsp_pert)
{
    QInt ioper;            /* incremental recorder over operators */
    RSPOneOper *cur_oper;  /* current operator */
    QErrorCode ierr;       /* error information */
    ioper = 0;
    cur_oper = one_oper;
    do {
        if (cur_oper->num_pert_lab>0 &&
            (cur_oper->pert_labels==NULL || cur_oper->pert_max_orders==NULL)) {
            printf("RSPOneOperAssemble>> %"QINT_FMT"-th one-electron operator\n",
                   ioper);
            QErrorExit(FILE_AND_LINE, "perturbations of one-electron operator not set");
        }
        if (cur_oper->get_one_oper_mat==NULL || cur_oper->get_one_oper_exp==NULL) {
            printf("RSPOneOperAssemble>> %"QINT_FMT"-th one-electron operator\n",
                   ioper);
            QErrorExit(FILE_AND_LINE, "callback functions of one-electron operator not set");
        }
        /* checks perturbation labels and allowed maximal orders against
           all known perturbations */
        ierr = RSPPertValidateLabelOrder(rsp_pert,
                                         cur_oper->num_pert_lab,
                                         cur_oper->pert_labels,
                                         cur_oper->pert_max_orders);
        QErrorCheckCode(ierr, FILE_AND_LINE, "calling RSPPertValidateLabelOrder()");
        /* moves to the next operator */
        ioper++;
        cur_oper = cur_oper->next_oper;
    } while (cur_oper!=NULL);
    return QSUCCESS;
}

/* <function name='RSPOneOperWrite'
             attr='private'
             author='Bin Gao'
             date='2014-07-30'>
     Writes the linked list of one-electron operators
     <param name='one_oper' direction='in'>
       The linked list of one-electron operators
     </param>
     <param name='fp_oper' direction='inout'>File pointer</param>
     <return>Error information</return>
   </function> */
QErrorCode RSPOneOperWrite(RSPOneOper *one_oper, FILE *fp_oper)
{
    QInt ioper;            /* incremental recorder over operators */
    RSPOneOper *cur_oper;  /* current operator */
    QInt ilab;             /* incremental recorder over perturbation labels */
    ioper = 0;
    cur_oper = one_oper;
    do {
        fprintf(fp_oper, "RSPOneOperWrite>> operator %"QINT_FMT"\n", ioper);
        fprintf(fp_oper,
                "RSPOneOperWrite>> number of pert. labels that one-electron operator depends on %"QINT_FMT"\n",
                cur_oper->num_pert_lab);
        fprintf(fp_oper, "RSPOneOperWrite>> label           maximum-order\n");
        for (ilab=0; ilab<cur_oper->num_pert_lab; ilab++) {
            fprintf(fp_oper,
                    "RSPOneOperWrite>>       %"QCPERTINT_FMT"                  %"QINT_FMT"\n",
                    cur_oper->pert_labels[ilab],
                    cur_oper->pert_max_orders[ilab]);
        }
#if defined(OPENRSP_C_USER_CONTEXT)
        if (cur_oper->user_ctx!=NULL) {
            fprintf(fp_oper, "RSPOneOperWrite>> user-defined function context given\n");
        }
#endif
        /* moves to the next operator */
        ioper++;
        cur_oper = cur_oper->next_oper;
    } while (cur_oper!=NULL);
    return QSUCCESS;
}

/* <function name='RSPOneOperGetMat'
             attr='private'
             author='Bin Gao'
             date='2015-10-15'>
     Calculates integral matrices of the linked list of one-electron operators
     <param name='one_oper' direction='inout'>
       The linked list of one-electron operators
     </param>
     <param name='oper_len_tuple' direction='in'>
       Length of the perturbation tuple on the linked list of one-electron
       operators
     </param>
     <param name='oper_pert_tuple' direction='in'>
       Perturbation tuple on the linked list of one-electron operators
     </param>
     <param name='num_int' direction='in'>
       Number of the integral matrices
     </param>
     <param name='val_int' direction='inout'>
       The integral matrices
     </param>
     <return>Error information</return>
   </function> */
QErrorCode RSPOneOperGetMat(RSPOneOper *one_oper,
                            const QInt oper_len_tuple,
                            const QcPertInt *oper_pert_tuple,
                            const QInt num_int,
                            QcMat *val_int[])
{
    RSPOneOper *cur_oper;  /* current operator */
    QErrorCode ierr;       /* error information */
    cur_oper = one_oper;
    do {
        /* gets perturbation labels and corresponding orders out of the internal
           perturbation tuple on the one-electron operator */
        ierr = RSPPertInternTupleToHostLabelOrder(oper_len_tuple,
                                                  oper_pert_tuple,
                                                  cur_oper->num_pert_lab,
                                                  cur_oper->pert_labels,
                                                  cur_oper->pert_max_orders,
                                                  &cur_oper->oper_num_pert,
                                                  cur_oper->oper_pert_labels,
                                                  cur_oper->oper_pert_orders);
        QErrorCheckCode(ierr, FILE_AND_LINE, "calling RSPPertInternTupleToHostLabelOrder()");
        /* checks if the perturbations on the one-electron operator
           result in zero values */
        if (cur_oper->oper_num_pert>=0) {
            /* calculates integral matrices using the callback function */
            cur_oper->get_one_oper_mat(cur_oper->oper_num_pert,
                                       cur_oper->oper_pert_labels,
                                       cur_oper->oper_pert_orders,
#if defined(OPENRSP_C_USER_CONTEXT)
                                       cur_oper->user_ctx,
#endif
                                       num_int,
                                       val_int);
        }
        /* moves to the next operator */
        cur_oper = cur_oper->next_oper;
    } while (cur_oper!=NULL);
    return QSUCCESS;
}

/* <function name='RSPOneOperGetExp'
             attr='private'
             author='Bin Gao'
             date='2015-10-15'>
     Calculates expectation values of the linked list of one-electron operators
     <param name='one_oper' direction='inout'>
       The linked list of one-electron operators
     </param>
     <param name='oper_len_tuple' direction='in'>
       Length of the perturbation tuple on the linked list of one-electron
       operators
     </param>
     <param name='oper_pert_tuple' direction='in'>
       Perturbation tuple on the linked list of one-electron operators
     </param>
     <param name='num_dmat' direction='in'>
       Number of atomic orbital (AO) based density matrices
     </param>
     <param name='dens_mat' direction='in'>
       The AO based density matrices
     </param>
     <param name='num_exp' direction='in'>
       Number of the expectation values
     </param>
     <param name='val_exp' direction='inout'>
       The expectation values
     </param>
     <return>Error information</return>
   </function> */
QErrorCode RSPOneOperGetExp(RSPOneOper *one_oper,
                            const QInt oper_len_tuple,
                            const QcPertInt *oper_pert_tuple,
                            const QInt num_dmat,
                            QcMat *dens_mat[],
                            const QInt num_exp,
                            QReal *val_exp)
{
    RSPOneOper *cur_oper;  /* current operator */
    QErrorCode ierr;       /* error information */
    cur_oper = one_oper;
    do {
        /* gets perturbation labels and corresponding orders out of the internal
           perturbation tuple on the one-electron operator */
        ierr = RSPPertInternTupleToHostLabelOrder(oper_len_tuple,
                                                  oper_pert_tuple,
                                                  cur_oper->num_pert_lab,
                                                  cur_oper->pert_labels,
                                                  cur_oper->pert_max_orders,
                                                  &cur_oper->oper_num_pert,
                                                  cur_oper->oper_pert_labels,
                                                  cur_oper->oper_pert_orders);
        QErrorCheckCode(ierr, FILE_AND_LINE, "calling RSPPertInternTupleToHostLabelOrder()");
        /* checks if the perturbations on the one-electron operator
           result in zero values */
        if (cur_oper->oper_num_pert>=0) {
            /* calculates expectation values using the callback function */
            cur_oper->get_one_oper_exp(cur_oper->oper_num_pert,
                                       cur_oper->oper_pert_labels,
                                       cur_oper->oper_pert_orders,
                                       num_dmat,
                                       dens_mat,
#if defined(OPENRSP_C_USER_CONTEXT)
                                       cur_oper->user_ctx,
#endif
                                       num_exp,
                                       val_exp);
        }
        /* moves to the next operator */
        cur_oper = cur_oper->next_oper;
    } while (cur_oper!=NULL);
    return QSUCCESS;
}

/* <function name='RSPOneOperDestroy'
             attr='private'
             author='Bin Gao'
             date='2014-07-30'>
     Destroys the linked list of one-electron operators, should be called
     at the end
     <param name='one_oper' direction='inout'>
       The linked list of one-electron operators
     </param>
     <return>Error information</return>
   </function> */
QErrorCode RSPOneOperDestroy(RSPOneOper **one_oper)
{
    RSPOneOper *cur_oper;   /* current operator */
    RSPOneOper *next_oper;  /* next operator */
    /* walks to the last operator */
    cur_oper = *one_oper;
    while (cur_oper!=NULL) {
        if (cur_oper->pert_max_orders!=NULL) {
            free(cur_oper->pert_max_orders);
            cur_oper->pert_max_orders = NULL;
        }
        if (cur_oper->oper_pert_orders!=NULL) {
            free(cur_oper->oper_pert_orders);
            cur_oper->oper_pert_orders = NULL;
        }
        if (cur_oper->pert_labels!=NULL) {
            free(cur_oper->pert_labels);
            cur_oper->pert_labels = NULL;
        }
        if (cur_oper->oper_pert_labels!=NULL) {
            free(cur_oper->oper_pert_labels);
            cur_oper->oper_pert_labels = NULL;
        }
#if defined(OPENRSP_C_USER_CONTEXT)
        cur_oper->user_ctx = NULL;
#endif
        cur_oper->get_one_oper_mat = NULL;
        cur_oper->get_one_oper_exp = NULL;
        next_oper = cur_oper->next_oper;
        free(cur_oper);
        cur_oper = NULL;
        cur_oper = next_oper;
    }
    return QSUCCESS;
}

