.. _chapter_overlap_operator:

Overlap Operator
================

During calculations, OpenRSP will invoke host program's callback functions to
calculate (perturbed) overlap integrals
:math:`\left\langle\tilde{\chi}_{\mu}^{a_{\mu}b_{\mu}\cdots}\left| %
\tilde{\chi}_{\nu}^{a_{\nu}b_{\nu}\cdots}\right.\right\rangle^{ab\cdots}` and
expectation values (by contracting with an array of density matrices sent by
OpenRSP), where :math:`a_{\mu}b_{\mu}\cdots`, :math:`a_{\nu}b_{\nu}\cdots` and
:math:`ab\cdots` are respectively perturbation tuples on the bra, the ket and
overlap integrals, which are generated by OpenRSP in its recursive routine.

However, one should note that OpenRSP will only ask for
:math:`\left\langle\tilde{\chi}_{\mu}^{a_{\mu}b_{\mu}\cdots}\left| %
\tilde{\chi}_{\nu}^{a_{\nu}b_{\nu}\cdots}\right.\right\rangle` or
:math:`\left\langle\tilde{\chi}_{\mu}\left|\tilde{\chi}_{\nu}\right.\right\rangle^{ab\cdots}`
instead of the more general case as aforementioned.

To send such callback functions and different perturbation labels that can act
as perturbations on the basis sets to OpenRSP, users can call the OpenRSP API
:c:func:`OpenRSPSetOverlap`.

In this API, arguments ``num_pert_lab``, ``pert_labels`` and
``pert_max_orders`` will be used in such a way that OpenRSP will not invoke the
callback functions if the perturbation tuples (:math:`a_{\mu}b_{\mu}\cdots`,
:math:`a_{\nu}b_{\nu}\cdots` and :math:`ab\cdots`) result in zero overlap
integrals.

Other two arguments, the callback functions :c:func:`get_overlap_mat` and
:c:func:`get_overlap_exp` are presented in :ref:`chapter_callback_functions`.
Users can refer to this chapter and the OpenRSP unit testing (files in
``tests``) to prepare their own callabck functions and to use this API.
